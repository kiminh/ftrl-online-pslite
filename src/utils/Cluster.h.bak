#ifndef CLUSTER_H
#define CLUSTER_H

#include <iostream>
#include <sstream>
#include <vector>
//#include <tr1/unordered_map>
#include <vector>
#include <boost/unordered_map.hpp>
#include <pthread.h>
#include "Redis.h"
#include <poll.h>


using namespace std;

//#define CLUSTER_DEBUG
#ifdef CLUSTER_DEBUG
static std::ofstream cluster_out("/data0/vad/ms/log/cluster.log", std::ios_base::app);
#endif

class Cluster {
public:
    Cluster() : serverNum_(0), pfds_(NULL) { 
        error_ = "";
    }
    ~Cluster() {
        for (int i = 0; i < serverNum_; ++i) {
            Worker &worker = workers_[i];
            close(worker.wakeup_pipe[0]);
            close(worker.wakeup_pipe[1]);
            close(worker.sleep_pipe[0]);
            close(worker.sleep_pipe[1]);
        }
        if (pfds_ != NULL)
            delete[] pfds_;
        if (conf_ != NULL)
            delete conf_;
    }
    bool Init(const std::string &file) {
        conf_ = new INIReader(file);
        if (conf_->ParseError() < 0) {
            error_ = "config file parse failed: " + file;
            return false;
        }
        std::string cluster = conf_->Get("main", "cluster", "");
        std::string server_group = conf_->Get("", "server_group", "");
        std::istringstream is(server_group);
        std::string server;
        std::vector<std::pair<std::string, int> > servers;
        while (getline(is, server, ',')) {
            size_t pos = server.find(':');
            std::string host = server.substr(0, pos);
            int port = strtoul(server.substr(pos + 1).c_str(), NULL, 10);
            servers.push_back(make_pair(host, port));
        }
        serverNum_ = servers.size();
/*
        if ((pfds_ = new(std::nothrow)pollfd[serverNum_]) == NULL) {
            error_ = "new pollfd failed";
            return false;
        }
*/
        workers_.resize(serverNum_);
        for (int i = 0; i < serverNum_; ++i) {
            Worker &worker = workers_[i];
            if (worker.redis.init(servers[i].first, servers[i].second, 0) == false) {
                std::ostringstream os;
                os << "init redis(" << servers[i].first << ':' << servers[i].second << ") failed: " << worker.redis.ErrorStr();
                error_ = os.str();
                return false;
            }
            /*if (pipe(worker.wakeup_pipe) != 0) {
                error_ = "init pipe failed";
                return false;
            }
            if (pipe(worker.sleep_pipe) != 0) {
                error_ = "init pipe failed";
                return false;
            }
            worker.pfd.fd = worker.wakeup_pipe[0];
            worker.pfd.events = POLLIN;
            pfds_[i].fd = worker.sleep_pipe[0];
            pfds_[i].events = POLLIN;*/
        }
/*
        for (int i = 0; i < serverNum_; ++i) {
            if (pthread_create(&(workers_[i].tid), NULL, RunWorker, (void *)this) != 0) {
                error_ = "init thread failed";
                return false;
            }
        }
*/
#ifdef CLUSTER_DEBUG
cluster_out << "init thread success" << std::endl;
#endif
        return true;
    }
    void Clear() {
        for (int i = 0; i < serverNum_; ++i)
            workers_[i].Clear();
    }
    bool Set(const std::string &key, const std::string &value) {
        return workers_[Hash(key)].redis.set(key, value);
    }
    bool SetEx(const std::string &key, const std::string &value, int32_t expire) {
        return workers_[Hash(key)].redis.setex(key, value, expire);
    }
    bool MDel(const std::vector<std::string>& keys) {
        for (int k=0; k<keys.size(); k++)
            workers_[Hash(keys[k])].kvs.push_back(keys[k]);

        int fetchingServerNum = serverNum_;
        for (int i = 0; i < serverNum_; ++i) {
            write(workers_[i].wakeup_pipe[1], "x", 1);
            workers_[i].task = "del";
        }
        char buf[128];
        while (fetchingServerNum != 0) {
            if (poll(pfds_, serverNum_, 10000000) <= 0)
                continue;
            for (int i = 0; i < serverNum_; ++i) {
                if (pfds_[i].revents & POLLIN) {
                    read(pfds_[i].fd, buf, 128);
                    --fetchingServerNum;
                }
            }
        }

        return true;        
    }
    bool SetExpire(const std::vector<std::string>& keys, unsigned int timeout) {
        for (int k=0; k<serverNum_; k++) 
            workers_[k].timeout = timeout;
        for (int k=0; k<keys.size(); k++)
            workers_[Hash(keys[k])].kvs.push_back(keys[k]);
        /*for (int k=0; k<serverNum_; k++) {
                if (workers_[k].redis.mset_expire(workers_[k].kvs, workers_[k].timeout))
                    workers_[k].Clear();
                else {
                    fprintf(stderr, "set expire failed:%d", k);
                }
        }*/
        
        int fetchingServerNum = serverNum_;
        for (int i = 0; i < serverNum_; ++i) {
            write(workers_[i].wakeup_pipe[1], "x", 1);
            workers_[i].task = "expire";
        }
        char buf[128];
        while (fetchingServerNum != 0) {
            if (poll(pfds_, serverNum_, 10000000) <= 0)
                continue;
            for (int i = 0; i < serverNum_; ++i) {
                if (pfds_[i].revents & POLLIN) {
                    read(pfds_[i].fd, buf, 128);
                    --fetchingServerNum;
                }
            }
        }

        return true;
    }
    const std::string &ErrorStr() const { return error_; }
    
private:
    Cluster(const Cluster &rhs);
    Cluster &operator=(const Cluster &rhs);
    static void *RunWorker(void *arg) {
        Cluster &cluster = *((Cluster *)arg);
        pthread_t tid = pthread_self();
        int index = 0;
        for (int i = 0; i < cluster.serverNum_; ++i) {
            if (tid == cluster.workers_[i].tid) {
                index = i;
                break;
            }
        }
        Worker &worker = cluster.workers_[index];
        char buf[128];
        for (;;) {
            if (poll(&(worker.pfd), 1, 10000000) <= 0)
                continue;
            if (worker.pfd.revents & POLLIN) {
                read(worker.pfd.fd, buf, 128);
                //worker.redis.mget(worker.kvs);
                /*for (int k=0; k<worker.kvs.size(); k++) {
                    if (worker.redis.set_expire(worker.kvs[k], worker.timeout))
                        continue;
                    printf("%s\n", worker.kvs[k].c_str());
                }*/

                if (worker.task == "expire" && worker.redis.mset_expire(worker.kvs, worker.timeout)) {
                    worker.Clear();
                } else if (worker.task == "del" && worker.redis.mdel(worker.kvs)) {
                    worker.Clear();
                } else {
                    fprintf(stderr, "[%s]", worker.task.c_str());
                    for (int k=0; k<worker.kvs.size(); k++) {
                        printf("%s\n", worker.kvs[k].c_str());
                    }
                    fprintf(stderr, "E");
                }
                write(worker.sleep_pipe[1], "x", 1);
            }
        }
        return (void *)0;
    }
    /* This is FNV hash */
    uint32_t Hash(const std::string &key) const {
        unsigned long hash = 2166136261;
        for (size_t i = 0; i < key.size(); ++i)
            hash = (hash * 16777619) ^ key[i];
        unsigned long v = hash&0xffffffff;
        return (uint32_t)(v % serverNum_);
        //return 0;
    }
private:
    class Worker {
    public:
        Worker() : tid(0) { task = "expire"; }
        void Clear() { kvs.clear(); }
        pthread_t tid;
        Redis redis;
        std::vector<std::string> kvs;
        int wakeup_pipe[2];
        int sleep_pipe[2];
        pollfd pfd;
        int timeout;
        std::string task;
    };
    INIReader *conf_;
    int serverNum_;
    std::vector<Worker> workers_;
    pollfd *pfds_;
    std::string error_;
};

#endif

